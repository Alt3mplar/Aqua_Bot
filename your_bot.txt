import sys

import settings
import discord
import message_handler

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from events.base_event import BaseEvent
from events import *
from multiprocessing import Process


this = sys.modules[__name__]
this.running = False

sched = AsyncIOScheduler()
##############################

def main():
      '''
  Start up output for the program
  -----
  Checks the settings applied and implements all imported information such as the world clock function
  Parameters
  ----------
  message : str
    message input by the user for the bot to process
  text : str
    copy of input text related to output text
  parameter3 : type, optional
    description of parameter3
  
  Returns
  -------
  str
    if there was an error in message processing
      '''
    print("Starting up...")
    client = discord.Client()

    @client.event
    async def on_ready():
        if this.running:
            return

        this.running = True

        if settings.NOW_PLAYING:
            print("Setting NP game", flush=True)
            await client.change_presence(
                game=discord.Game(name=settings.NOW_PLAYING))
        print("Logged in!", flush=True)

        print("Loading events...", flush=True)
        n_ev = 0
        for ev in BaseEvent.__subclasses__():
            event = ev()
            sched.add_job(event.run, 'interval', (client,), 
                          minutes=event.interval_minutes)
            n_ev += 1
        sched.start()
        print(f"{n_ev} events loaded", flush=True)

    async def common_handle_message(message):
        text = message.content
        if text.startswith(settings.COMMAND_PREFIX) and text != settings.COMMAND_PREFIX:
            cmd_split = text[len(settings.COMMAND_PREFIX):].split()
            try:
                await message_handler.handle_command(cmd_split[0].lower(), 
                                      cmd_split[1:], message, client)
            except:
                print("Error while handling message", flush=True)
                raise

    @client.event
    async def on_message(message):
        await common_handle_message(message)

    @client.event
    async def on_message_edit(before, after):
        await common_handle_message(after)

    client.run(settings.BOT_TOKEN)

###########


if __name__ == "__main__":
    main()
